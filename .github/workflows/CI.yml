name: CI

on:
  push:
    branches: [main, master]
    tags: ['*']
  pull_request:
  workflow_dispatch:

permissions:
  contents: read

jobs:
  lint-doc-test:
    name: Lint, Docs, Type Check
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: ['3.11']

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install Python deps
        run: |
          pip install -r requirements.txt
          pip install flake8 black isort mypy mkdocs

      - name: Lint
        run: |
          flake8 scripts/ || true
          black --check scripts/ || true
          isort --check-only scripts/ || true

      - name: Type Check
        run: mypy scripts/ --ignore-missing-imports || true

      - name: Build Docs
        run: mkdocs build --strict --clean

      - name: Serve Test Docs Locally
        run: |
          timeout 30s mkdocs serve --dev-addr 127.0.0.1:8000 &
          PID=$!
          sleep 5
          curl -f http://127.0.0.1:8000 || echo "Warning: mkdocs serve failed"
          kill $PID || true

  security-check:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Security Tools
        run: |
          pip install safety bandit -r requirements.txt

      - name: Safety
        run: safety check || true

      - name: Bandit
        run: bandit -r scripts/ || true

  markdown-quality:
    name: Docs Language & Style
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20

      - run: npm install markdownlint-cli2 alex

      - name: Lint Markdown
        run: npx markdownlint-cli2 "**/*.md" || true

      - name: Inclusive Language
        run: |
          npx alex README.md docs/ docs-management/ || true

  benchmark:
    name: Benchmark Comparison
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - run: pip install . numpy

      - run: python scripts/benchmark.py --output pr_benchmark.json
      - run: python scripts/batch_ben.py --output pr_batch.json

      - run: |
          cp scripts/compare_results.py /tmp/
          cp pr_benchmark.json /tmp/pr_benchmark.json
          cp pr_batch.json /tmp/pr_batch.json

      - run: |
          git fetch origin main
          git checkout -B main origin/main
          pip install .

      - run: python scripts/benchmark.py --output base_benchmark.json
      - run: python scripts/batch_ben.py --output base_batch.json

      - run: |
          cp base_benchmark.json /tmp/
          cp base_batch.json /tmp/

      - run: python /tmp/compare_results.py /tmp/base_benchmark.json /tmp/pr_benchmark.json
      - run: python /tmp/compare_results.py /tmp/base_batch.json /tmp/pr_batch.json

  wheels:
    name: Build Wheels
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      matrix:
        platform:
          - runner: ubuntu-22.04
            target: x86_64
          - runner: ubuntu-22.04
            target: aarch64
          - runner: windows-latest
            target: x64
          - runner: macos-latest
            target: universal2

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: 3.x
      - uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist --find-interpreter
          sccache: true
          manylinux: auto
      - uses: actions/upload-artifact@v4
        with:
          name: wheel-${{ matrix.platform.target }}
          path: dist

  sdist:
    name: Build sdist
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: PyO3/maturin-action@v1
        with:
          command: sdist
          args: --out dist
      - uses: actions/upload-artifact@v4
        with:
          name: sdist
          path: dist

  release:
    name: Release
    runs-on: ubuntu-latest
    if: ${{ startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch' }}
    needs: [wheels, sdist]
    permissions:
      id-token: write
      contents: write
      attestations: write

    steps:
      - uses: actions/download-artifact@v4
      - uses: actions/attest-build-provenance@v2
        with:
          subject-path: 'wheel-*/*'
      - uses: PyO3/maturin-action@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          command: upload
          args: --non-interactive --skip-existing wheel-*/*
        env:
          MATURIN_PYPI_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
